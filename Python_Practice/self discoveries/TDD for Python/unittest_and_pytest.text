Testing Python code is different from testing JavaScript. 
In JavaScript, you might use Jasmine or similar frameworks 
for testing. In Python, the standard way to write tests is 
using the built-in 'unittest' framework or third-party libraries 
like 'pytest'.

# Using unittest

To write tests for your Python code similar to the Jasmine 
style you're familiar with, you can use 'unittest'. This framework 
allows you to create test cases by subclassing 'unittest.TestCase'.

# 1. We start by creatina  file called math_functions.py that 
#    contains the functions we want to test.

# 2. Then we create a file called test_math_functions.py in order
#    to write our test cases.

# 3. We import the unittest module and the functions we want to test
#    from the math_functions module.

# 4. To run the tests, we use the unittest.main() function, and in the
#    command line we run the test_math_functions.py file with the command
#    'python test_math_functions.py.'

# your_project/
# │
# ├── math_functions.py       # File containing functions to test
# └── test_math_functions.py  # File containing unittest test cases

# Tips

#     *Each test method in your unittest.TestCase subclass should start with the word test. 
#     This naming convention informs the test runner about which methods represent tests.
#     *Use assert methods provided by unittest.TestCase, such as assertEqual, assertTrue, 
#     assertFalse, to check the behavior of your functions.
#     *You can have multiple test cases (methods) within a single test class, and you can 
#     have multiple test classes in a test file.

# Using pytest

# 1.    Install pytest using the command 'pip install pytest'
# 2.    Write Test Functions: Create your test file (e.g., test_math_functions.py). Write test 
        functions that start with test_. Use assert statements for validation. For example:

            from math_functions import add, subtract

            def test_add():
                assert add(2, 3) == 5

            def test_subtract():
                assert subtract(5, 2) == 3

# 3.    Run Tests: In your terminal, navigate to the directory containing your test file and 
        execute pytest to run all tests using 'pytest test_file_name.py' or 
        'python -m pytest test_file_name.py'
# 4.    Review Test Results: Pytest provides a detailed report in the terminal about each test, 
        indicating success or failure.