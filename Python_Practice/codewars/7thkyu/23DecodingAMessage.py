# DESCRIPTION:
# You have managed to intercept an important message and you are 
# trying to read it.

# You realise that the message has been encoded and can be decoded 
# by switching each letter with a corresponding letter.

# You also notice that each letter is paired with the letter that 
# it coincides with when the alphabet is reversed.

# For example: "a" is encoded with "z", "b" with "y", "c" with "x", 
# etc

# You read the first sentence:

# "r slkv mlylwb wvxlwvh gsrh nvhhztv"
# After a few minutes you manage to decode it:

# "i hope nobody decodes this message"
# Create a function that will instantly decode any of these messages

# You can assume no punctuation or capitals, only lower case letters, 
# but remember spaces!

# -------------------------------------------------------------------------------------
# -----Solution 1-----ascii_lowercase & str.maketrans() & translate-----
from str import ascii_lowercase as alphabet

def decode(message):
    return message.translate(str.maketrans(alphabet, alphabet[::-1]))
#   1.  Import ascii_lowercase from str which provides the lowercase alphabet ******* NOTE *******
#   2.  Return the message translated using the translation table 
#       generated by str.maketrans() method which takes two arguments & ******* NOTE *******
#       returns a translation table that maps each character in the first
#       argument to the character at the same position in the 2nd argument
#   3.  The translation table is generated by passing the alphabet
#       & the reverse of the alphabet to str.maketrans()
#   4.  The message is translated using the translation table
#   5.  Return the translated message

# -------------------------------------------------------------------------------------
# -----Solution 2-----Similar to Solution 1 but without importing ascii_lowercase-----
def decode(message):
    return message.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz','zyxwvutsrqponmlkjihgfedcba'))
#   1.  Return the message translated using the translation table
#       generated by str.maketrans() method
#   2.  The translation table is generated by passing the alphabet
#       & the reverse of the alphabet to str.maketrans()
#   3.  The message is translated using the translation table
#   4.  Return the translated message

# -------------------------------------------------------------------------------------
# -----Solution 3-----Javascript Solution Using Replace() & IndexOf()-----
# const decode = $ => $.replace(/[a-z]/g, x=> "zyxwvutsrqponmlkjihgfedcba"['abcdefghijklmnopqrstuvwxyz'.indexOf(x)])

#   1.  Replace all lowercase letters in the message with the corresponding
#       letter in the reverse alphabet
#   2.  The corresponding letter in the reverse alphabet is found by using
#       the index of the letter in the alphabet to find the letter in the
#       reverse alphabet
#   3.  Return the decoded message
